import java.nio.file.Files
import java.nio.file.StandardOpenOption

plugins {
    id "java"
    id "java-library"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    google()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "Jitpack"
        url "https://jitpack.io/"
    }
    maven {
        name "FabricMC"
        url "https://maven.fabricmc.net/"
    }
}

configurations {

}

dependencies {
    implementation "com.github.Ultreon.bubble-blaster-2:core:libgdx-SNAPSHOT"
    implementation "com.github.Ultreon.bubble-blaster-2:desktop:libgdx-SNAPSHOT"
    implementation "com.github.Ultreon.bubble-blaster-2:desktop-merge:libgdx-SNAPSHOT"
    implementation "com.github.Ultreon.bubble-blaster-2:gameprovider:libgdx-SNAPSHOT"
    implementation "com.github.Ultreon.bubble-blaster-2:minimal:libgdx-SNAPSHOT"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.1"

    // SLF4J
    api "org.slf4j:slf4j-api:$slf4j_version"

    implementation "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-bullet-platform:$gdx_version:natives-desktop"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdx_controllers_version"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-desktop"

    // fabric-loader dependencies
    implementation "org.ow2.asm:asm:$asm_version"
    implementation "org.ow2.asm:asm-analysis:$asm_version"
    implementation "org.ow2.asm:asm-commons:$asm_version"
    implementation "org.ow2.asm:asm-tree:$asm_version"
    implementation "org.ow2.asm:asm-util:$asm_version"

    implementation("net.fabricmc:sponge-mixin:$mixin_version") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    implementation 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
    implementation 'net.fabricmc:tiny-remapper:0.8.5'
    implementation 'net.fabricmc:dev-launch-injector:0.2.1+build.8'
    implementation 'net.fabricmc:access-widener:2.1.0'

    compileOnly "net.fabricmc:fabric-loader:$fabric_version"
}

compileJava {
    doFirst {
        mkdir "${projectDir}/run/"
    }
}

test {
    useJUnitPlatform()
}

mkdir("$buildDir/bubbles")

def ps = System.getProperty("path.separator")
def files = configurations.runtimeClasspath
def strm = (files.toList()).stream()
def rcl = String.join(ps, strm.map {
    it.path
}.filter{it != null }.toList())
//\tfabric.remapClasspathFile=$buildDir/bubbles/classpath.txt
//\tfabric.classPathGroups=$buildDir/classes/java/main/$ps$buildDir/resources/main/$ps${project(":core").buildDir}/classes/java/main/$ps${project(":core").buildDir}/resources/main/$ps${project(":desktop").buildDir}/classes/java/main/$ps${project(":desktop").buildDir}/resources/main/$ps${project(":gameprovider").buildDir}/classes/java/main/$ps${project(":gameprovider").buildDir}/resources/main/$ps$rcl
def conf = """
commonProperties
\tfabric.development=true
\tlog4j2.formatMsgNoLookups=true
\tfabric.log.disableAnsi=false
\tlog4j.configurationFile=$projectDir/log4j.xml
"""

def launchFile = file("$buildDir/bubbles/launch.cfg")
Files.writeString(launchFile.toPath(), conf, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

def cp = "$rcl"

def cpFile = file("$buildDir.absolutePath/bubbles/classpath.txt")
Files.writeString(cpFile.toPath(), cp, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

idea{
    project{
        settings {
            withIDEADir { File dir ->
                println("Callback 1 executed with: " + dir.absolutePath)
            }

            runConfigurations {
                "Bubble Blaster"(org.jetbrains.gradle.ext.Application) {                       // Create new run configuration "MyApp" that will run class foo.App
                    jvmArgs = "-Xmx2g -Dfabric.dli.config=$launchFile.path -Dfabric.dli.env=CLIENT -Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"
                    mainClass = 'net.fabricmc.devlaunchinjector.Main'
                    moduleName = idea.module.name + ".main"
                    workingDirectory = "$projectDir/run/"
                    programParameters = "--gameDir=."
                }
            }
        }
    }
}
